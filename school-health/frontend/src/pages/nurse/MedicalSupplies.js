import React, { useState, useMemo, useEffect } from 'react';
import Header from '../../components/nurse/Header';
import Footer from '../../components/nurse/Footer';
import '../../styles/MedicalSupplies.css';
import { createSupply, getAllMedicines, updateSupply, deleteSupply } from '../../api/medicineApi';

const mockSupplies = [
  { id: 1, name: 'Paracetamol 500mg', category: 'S·ªët', quantity: 150, unit: 'vi√™n', expiryDate: '2025-12-31', status: 'in_stock' },
  { id: 2, name: 'Terpin Codein', category: 'Ho', quantity: 80, unit: 'vi√™n', expiryDate: '2024-10-31', status: 'in_stock' },
  { id: 3, name: 'Berberin', category: 'Ti√™u h√≥a', quantity: 120, unit: 'vi√™n', expiryDate: '2025-08-31', status: 'in_stock' },
  { id: 4, name: 'Oresol', category: 'Ti√™u h√≥a', quantity: 45, unit: 'g√≥i', expiryDate: '2026-01-31', status: 'in_stock' },
  { id: 5, name: 'BƒÉng g·∫°c y t·∫ø', category: 'V·∫≠t t∆∞', quantity: 15, unit: 'cu·ªôn', expiryDate: '2027-01-01', status: 'low_stock' },
  { id: 6, name: 'N∆∞·ªõc mu·ªëi sinh l√Ω', category: 'V·∫≠t t∆∞', quantity: 8, unit: 'chai', expiryDate: '2024-09-15', status: 'low_stock' },
  { id: 7, name: 'C·ªìn 90 ƒë·ªô', category: 'V·∫≠t t∆∞', quantity: 0, unit: 'chai', expiryDate: '2025-05-31', status: 'out_of_stock' },
  { id: 8, name: 'Ibuprofen 400mg', category: 'S·ªët', quantity: 90, unit: 'vi√™n', expiryDate: '2023-11-30', status: 'expired' },
  { id: 9, name: 'Thu·ªëc ho Prospan', category: 'Ho', quantity: 25, unit: 'chai', expiryDate: '2025-02-28', status: 'in_stock' },
  { id: 10, name: 'BƒÉng c√° nh√¢n', category: 'V·∫≠t t∆∞', quantity: 200, unit: 'c√°i', expiryDate: '2026-07-31', status: 'in_stock' },
];

const MedicalSupplies = () => {
  const [supplies, setSupplies] = useState(mockSupplies);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [newSupplyData, setNewSupplyData] = useState({
    name: '',
    category: '',
    quantity: '',
    unit: '',
    expiryDate: '',
  });

  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingSupply, setEditingSupply] = useState(null);

  const handleDeleteSupply = async (id) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?')) {
      try {
        await deleteSupply(id);
        setSupplies(prev => prev.filter(supply => supply.id !== id));
      } catch (error) {
        alert(error.message || 'C√≥ l·ªói khi x√≥a thu·ªëc/v·∫≠t t∆∞');
      }
    }
  };

  const handleOpenAddModal = () => setIsAddModalOpen(true);

  const handleCloseAddModal = () => {
    setIsAddModalOpen(false);
    setNewSupplyData({ name: '', category: '', quantity: '', unit: '', expiryDate: '' });
  };

  const handleNewSupplyInputChange = (e) => {
    const { name, value } = e.target;
    setNewSupplyData(prev => ({ ...prev, [name]: value }));
  };

  const handleAddNewSupply = async (e) => {
    e.preventDefault();
    try {
      // Map d·ªØ li·ªáu ƒë√∫ng v·ªõi entity backend
      const newSupply = {
        maThuoc: '', // ƒë·ªÉ tr·ªëng, backend s·∫Ω t·ª± sinh n·∫øu c·∫ßn
        ten: newSupplyData.name,
        lieuLuong: '', // ho·∫∑c l·∫•y t·ª´ form n·∫øu mu·ªën
        donVi: newSupplyData.unit,
        moTa: newSupplyData.category,
        soLuong: Number(newSupplyData.quantity), // th√™m s·ªë l∆∞·ª£ng
        hanSuDung: newSupplyData.expiryDate, // th√™m h·∫°n s·ª≠ d·ª•ng
      };
      const created = await createSupply(newSupply);

      // N·∫øu backend tr·∫£ v·ªÅ b·∫£n ghi v·ª´a t·∫°o, map l·∫°i v√† th√™m v√†o danh s√°ch
      // N·∫øu kh√¥ng, t·ª± t·∫°o object m·ªõi t·ª´ newSupplyData
      const newSupplyFrontend = {
        id: created?.maThuoc || Math.random().toString(36).substr(2, 9),
        name: newSupplyData.name,
        category: newSupplyData.category,
        quantity: Number(newSupplyData.quantity),
        unit: newSupplyData.unit,
        expiryDate: newSupplyData.expiryDate,
      };

      setSupplies(prev => [...prev, newSupplyFrontend]);
      handleCloseAddModal();
    } catch (error) {
      alert(error.message || 'C√≥ l·ªói khi th√™m m·ªõi thu·ªëc/v·∫≠t t∆∞');
    }
  };

  const handleOpenEditModal = (supply) => {
    setEditingSupply(supply);
    setIsEditModalOpen(true);
  };

  const handleCloseEditModal = () => {
    setIsEditModalOpen(false);
    setEditingSupply(null);
  };

  const handleEditSupplyInputChange = (e) => {
    const { name, value } = e.target;
    setEditingSupply(prev => ({ ...prev, [name]: value }));
  };

  const handleUpdateSupply = async (e) => {
    e.preventDefault();
    if (!editingSupply) return;
    try {
      // Map d·ªØ li·ªáu ƒë√∫ng v·ªõi entity backend
      const updatedSupply = {
        maThuoc: editingSupply.id,
        ten: editingSupply.name,
        lieuLuong: '', // ho·∫∑c l·∫•y t·ª´ form n·∫øu mu·ªën
        donVi: editingSupply.unit,
        moTa: editingSupply.category,
        soLuong: Number(editingSupply.quantity), // th√™m s·ªë l∆∞·ª£ng
        hanSuDung: editingSupply.expiryDate, // th√™m h·∫°n s·ª≠ d·ª•ng
      };
      await updateSupply(editingSupply.id, updatedSupply);

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch tr√™n frontend (c√°ch 1: reload l·∫°i to√†n b·ªô)
      const medicinesFromServer = await getAllMedicines();
      setSupplies(medicinesFromServer.map(mapBackendToFrontend));
      handleCloseEditModal();
    } catch (error) {
      alert(error.message || 'C√≥ l·ªói khi c·∫≠p nh·∫≠t thu·ªëc/v·∫≠t t∆∞');
    }
  };

  const filteredSupplies = useMemo(() => {
    return supplies
      .filter(supply => {
        // Filter by category
        if (categoryFilter !== 'all' && supply.category !== categoryFilter) {
          return false;
        }
        // Filter by status
        if (statusFilter !== 'all') {
          const today = new Date();
          const expiryDate = new Date(supply.expiryDate);
          
          let currentStatus;
          if (expiryDate < today) {
            currentStatus = 'expired';
          } else if (supply.quantity === 0) {
            currentStatus = 'out_of_stock';
          } else if (supply.quantity < 20) {
            currentStatus = 'low_stock';
          } else {
            currentStatus = 'in_stock';
          }
          
          if (statusFilter !== currentStatus) {
            return false;
          }
        }
        // Filter by search term
        if (searchTerm && !supply.name.toLowerCase().includes(searchTerm.toLowerCase())) {
          return false;
        }
        return true;
      });
  }, [supplies, searchTerm, categoryFilter, statusFilter]);

  const getStatusInfo = (supply) => {
    const today = new Date();
    const expiryDate = new Date(supply.expiryDate);

    if (expiryDate < today) return { text: 'ƒê√£ h·∫øt h·∫°n', className: 'status-expired' };
    if (supply.quantity === 0) return { text: 'H·∫øt h√†ng', className: 'status-out-of-stock' };
    if (supply.quantity < 20) return { text: 'S·∫Øp h·∫øt h√†ng', className: 'status-low-stock' };
    return { text: 'C√≤n h√†ng', className: 'status-in-stock' };
  };
  
  const summaryData = useMemo(() => {
    const totalTypes = supplies.length;
    const lowStockCount = supplies.filter(s => s.quantity > 0 && s.quantity < 20).length;
    const expiredCount = supplies.filter(s => new Date(s.expiryDate) < new Date()).length;
    return { totalTypes, lowStockCount, expiredCount };
  }, [supplies]);

  const categories = useMemo(() => [...new Set(supplies.map(s => s.category))], [supplies]);

  // H√†m map d·ªØ li·ªáu t·ª´ backend v·ªÅ frontend
  function mapBackendToFrontend(thuoc) {
    return {
      id: thuoc.maThuoc,
      name: thuoc.ten,
      category: thuoc.moTa,
      quantity: thuoc.soLuong,
      unit: thuoc.donVi,
      expiryDate: thuoc.hanSuDung,
    };
  }

  // Load supplies t·ª´ backend khi m·ªü trang ho·∫∑c sau khi th√™m m·ªõi
  useEffect(() => {
    getAllMedicines().then(data => setSupplies(data.map(mapBackendToFrontend))).catch(() => setSupplies([]));
  }, []);

  return (
    <div className="nurse-layout">
      <Header />
      <main className="supplies-main">
        <div className="supplies-container">
          <h1 className="supplies-title">Qu·∫£n l√Ω Kho thu·ªëc & V·∫≠t t∆∞ y t·∫ø</h1>
          
          <div className="summary-cards">
            <div className="summary-card">
              <div className="card-icon">üì¶</div>
              <div className="card-content">
                <h3>T·ªïng s·ªë lo·∫°i</h3>
                <p>{summaryData.totalTypes}</p>
              </div>
            </div>
            <div className="summary-card low-stock">
              <div className="card-icon">‚ö†Ô∏è</div>
              <div className="card-content">
                <h3>S·∫Øp h·∫øt h√†ng</h3>
                <p>{summaryData.lowStockCount}</p>
              </div>
            </div>
            <div className="summary-card expired">
              <div className="card-icon">üö´</div>
              <div className="card-content">
                <h3>ƒê√£ h·∫øt h·∫°n</h3>
                <p>{summaryData.expiredCount}</p>
              </div>
            </div>
          </div>

          <div className="supplies-toolbar">
            <div className="search-bar">
              <i className="fas fa-search"></i>
              <input 
                type="text" 
                placeholder="T√¨m ki·∫øm theo t√™n thu·ªëc..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="filters">
              <select value={categoryFilter} onChange={e => setCategoryFilter(e.target.value)}>
                <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
                {categories.map(cat => <option key={cat} value={cat}>{cat}</option>)}
              </select>
              <select value={statusFilter} onChange={e => setStatusFilter(e.target.value)}>
                <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
                <option value="in_stock">C√≤n h√†ng</option>
                <option value="low_stock">S·∫Øp h·∫øt h√†ng</option>
                <option value="out_of_stock">H·∫øt h√†ng</option>
                <option value="expired">ƒê√£ h·∫øt h·∫°n</option>
              </select>
            </div>
            <button className="add-supply-btn" onClick={handleOpenAddModal}>
              <i className="fas fa-plus"></i> Th√™m m·ªõi
            </button>
          </div>

          <div className="supplies-table-container">
            <table className="supplies-table">
              <thead>
                <tr>
                  <th>T√™n s·∫£n ph·∫©m</th>
                  <th>Danh m·ª•c</th>
                  <th>S·ªë l∆∞·ª£ng</th>
                  <th>H·∫°n s·ª≠ d·ª•ng</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {filteredSupplies.length > 0 ? (
                  filteredSupplies.map(supply => {
                    const status = getStatusInfo(supply);
                    return (
                      <tr key={supply.id}>
                        <td>{supply.name}</td>
                        <td>{supply.category}</td>
                        <td>{supply.quantity} {supply.unit}</td>
                        <td>{new Date(supply.expiryDate).toLocaleDateString('vi-VN')}</td>
                        <td>
                          <span className={`status-badge ${status.className}`}>
                            {status.text}
                          </span>
                        </td>
                        <td>
                          <div className="action-buttons">
                            <button className="action-btn edit-btn" onClick={() => handleOpenEditModal(supply)}>
                              <i className="fas fa-edit"></i>
                            </button>
                            <button 
                              className="action-btn delete-btn" 
                              onClick={() => handleDeleteSupply(supply.id)}
                            >
                              <i className="fas fa-trash"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })
                ) : (
                  <tr>
                    <td colSpan="6" className="no-results">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.</td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {isAddModalOpen && (
            <div className="modal-overlay">
              <div className="modal-content">
                <div className="modal-header">
                  <h2>Th√™m m·ªõi Thu·ªëc/V·∫≠t t∆∞</h2>
                  <button onClick={handleCloseAddModal} className="close-btn">‚úï</button>
                </div>
                <form onSubmit={handleAddNewSupply} className="modal-form">
                  <div className="form-group">
                    <label>T√™n s·∫£n ph·∫©m</label>
                    <input type="text" name="name" value={newSupplyData.name} onChange={handleNewSupplyInputChange} placeholder="VD: Paracetamol 500mg" required />
                  </div>
                  <div className="form-group">
                    <label>Danh m·ª•c</label>
                    <input type="text" name="category" value={newSupplyData.category} onChange={handleNewSupplyInputChange} placeholder="VD: S·ªët, Ho, V·∫≠t t∆∞..." required />
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>S·ªë l∆∞·ª£ng</label>
                      <input type="number" name="quantity" value={newSupplyData.quantity} onChange={handleNewSupplyInputChange} required min="0" />
                    </div>
                    <div className="form-group">
                      <label>ƒê∆°n v·ªã</label>
                      <input type="text" name="unit" value={newSupplyData.unit} onChange={handleNewSupplyInputChange} placeholder="VD: vi√™n, chai, h·ªôp..." required />
                    </div>
                  </div>
                  <div className="form-group">
                    <label>H·∫°n s·ª≠ d·ª•ng</label>
                    <input type="date" name="expiryDate" value={newSupplyData.expiryDate} onChange={handleNewSupplyInputChange} required />
                  </div>
                  <div className="form-actions">
                    <button type="button" className="cancel-btn" onClick={handleCloseAddModal}>H·ªßy</button>
                    <button type="submit" className="submit-btn">Th√™m v√†o kho</button>
                  </div>
                </form>
              </div>
            </div>
          )}

          {isEditModalOpen && editingSupply && (
            <div className="modal-overlay">
              <div className="modal-content">
                <div className="modal-header">
                  <h2>Ch·ªânh s·ª≠a Thu·ªëc/V·∫≠t t∆∞</h2>
                  <button onClick={handleCloseEditModal} className="close-btn">‚úï</button>
                </div>
                <form onSubmit={handleUpdateSupply} className="modal-form">
                  <div className="form-group">
                    <label>T√™n s·∫£n ph·∫©m</label>
                    <input type="text" name="name" value={editingSupply.name} onChange={handleEditSupplyInputChange} required />
                  </div>
                  <div className="form-group">
                    <label>Danh m·ª•c</label>
                    <input type="text" name="category" value={editingSupply.category} onChange={handleEditSupplyInputChange} required />
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>S·ªë l∆∞·ª£ng</label>
                      <input type="number" name="quantity" value={editingSupply.quantity} onChange={handleEditSupplyInputChange} required min="0" />
                    </div>
                    <div className="form-group">
                      <label>ƒê∆°n v·ªã</label>
                      <input type="text" name="unit" value={editingSupply.unit} onChange={handleEditSupplyInputChange} required />
                    </div>
                  </div>
                  <div className="form-group">
                    <label>H·∫°n s·ª≠ d·ª•ng</label>
                    <input type="date" name="expiryDate" value={editingSupply.expiryDate} onChange={handleEditSupplyInputChange} required />
                  </div>
                  <div className="form-actions">
                    <button type="button" className="cancel-btn" onClick={handleCloseEditModal}>H·ªßy</button>
                    <button type="submit" className="submit-btn">L∆∞u thay ƒë·ªïi</button>
                  </div>
                </form>
              </div>
            </div>
          )}
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default MedicalSupplies;







